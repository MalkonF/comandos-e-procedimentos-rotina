#Gravar imagem .iso de instalação do sistema numa mídia
sudo dd if= <nome_imagem>.iso of=/dev/sdb bs=512k
sync


#Install virtualbox
sudo apt-get update
sudo apt-get upgrade
echo "deb http://download.virtualbox.org/virtualbox/debian stretch contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
sudo apt-get update
sudo apt-get install virtualbox-6.0
virtualbox


#Add chave pública no github p n precisar digitar senha a cada push/pull
sh-keygen -t rsa -b 4096 -C "your_email@example.com"
eval `ssh-agent -s`
ssh-add -K ~/.ssh/id_rsa
#salve a chave pub no github(site)
ssh -T git@github.com
git remote -v #checa se a sessão é http ou ssh, com a autenticação via chaves só vai funcionar qnd n é http, para converter use
git remote set-url origin git@github.com:USERNAME/REPOSITORY.git
#Teste fzd o push

#Inicializar um repositório
#Crie um repositório no site do github
#Crie o arquivo .gitignore
git init
echo "#instruções de uso para seu projeto" >> README.md
git add .
git commit -m "first commit"
git remote add origin git@github.com:MalkonF/osx.git
git push -u origin master


#habilitar o sudo para usuário comum
sudo apt-get install sudo
adduser <nome_usuario>
usermod -aG sudo <nome_usuario> 
#reinicie


#Bd
select * from tbusuarios where nomecli like 'jo%';
select ID, NAME, COUNTRYCODE, DISTRICT, POPULATION from CITY where COUNTRYCODE='USA' and POPULATION > '100000';
select * from CITY where id='1661';
select CITY, STATE from STATION ;
select distinct city from station where (mod(id, 2) = 0); #remover duplicatas / mostra somente id c núm par
select * from gafanhotos order by nome;
select * from gafanhotos order by nome asc; #ou coloca desc
select ano, nome, carga from cursos order by ano , nome; #ordena pelo ano e dps ordem alfabética. 
select nome, descricao from cursos where ano <= '2015' order by nome;
select nome, ano from cursos where ano between 2014 and 2016;
select nome, ano from cursos where ano between 2014 and 2016 order by ano desc, nome asc;
select nome, ano from cursos where ano in('2014', '2017') order by ano;
select * from cursos where carga < 15 and ano > 2000 order by nome;


#Instalar OpenJDK e Netbeans
cd /usr/local
wget -c https://www-us.apache.org/dist/incubator/netbeans/incubating-netbeans/incubating-10.0/incubating-netbeans-10.0-bin.zip
unzip incubating-netbeans-10.0-bin.zip -d ~/
cd ~/netbeans/bin
./netbeans
sudo apt update
sudo apt install default-jdk
sudo update-alternatives --config java
sudo nano /etc/environment
JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
source /etc/environment


#Mudando tema Netbeans 10
Tools > Plugins > Settings 
Add
http://plugins.netbeans.org/nbpluginportal/updates/8.2/catalog.xml.gz
#Theme Darkula

#Importing project from GIT in STS
#Execute com a opção smart p baixar as dependências com Maven ou selecione um projeto maven exitente

#Instalar STS

#Faça o download no site oficial=
mv spring-tool-suite-4-4.3.0.RELEASE-e4.12.0-linux.gtk.x86_64.tar.gz /usr/local
cd /usr/local
sudo tar -vzxf spring-tool-suite-4-4.3.0.RELEASE-e4.12.0-linux.gtk.x86_64.tar.gz sts-4.3.0.RELEASE/
cd sts-4.3.0.RELEASE/
./SpringToolSuite4

#Install spring boot CLI
cd /usr/local
wget https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/2.1.4.RELEASE/spring-boot-cli-2.1.4.RELEASE-bin.tar.gz
sudo tar -zxvf spring-boot-cli-2.1.4.RELEASE-bin.tar.gz
sudo nano ~/.bashrc
#Cole no final do arquivo
export SPRING_HOME=/usr/local/spring-2.1.4.RELEASE
export PATH=$SPRING_HOME/bin:$PATH
#Rode
cd ~
bash .bashrc
sudo reboot
spring run <nomeapp>
#Abra navegador e acesse http://localhost:8080/

#Se não aparecer ao banco de dados no console h2, faça
"jdbc:h2:~/test" to "jdbc:h2:mem:testdb"

#Criando estrutura de projeto
spring init
spring init -dweb,jpa,security
spring init -dweb,jpa,security --build gradle
spring init -dweb,jpa,security --build gradle -p war #por default as especificações de build produzem um .jar, se quiser produzir um .war
spring init -dweb,jpa,security --build gradle -p war myapp
spring init -dweb,jpa,security --build gradle -p jar -x
spring help init
spring init -l

gradle bootRun
gradle build
java -jar build/libs/readinglist-0.0.1-SNAPSHOT.jar

gradle dependencies #ver especificamente quais dependencias tem seu projeto
mvn dependency:tree

#Instalar Postman
#Baixe no site oficial
sudo mv Postman-linux-x64-7.2.2.tar.gz /usr/local
cd /usr/local
sudo tar xvf Postman-linux-x64-7.2.2.tar.gz
sudo ln -sf /usr/local/Postman/app/Postman /usr/bin/postman
nano ~/.local/share/applications/postman.desktop
#Cole no arquivo .desktop
[Desktop Entry]
Encoding=UTF-8
Name=Postman
Exec=/usr/bin/postman
Icon=/usr/local/Postman/app/resources/app/assets/icon.png
Terminal=false
Type=Application
Categories=Development;
#ou rode pela linha de comando
cd Postman/ 
./Postman

#execute script from desktop shortcut. Crie arquivo com o seguinte conteúdo(adapte de acordo com o programa) e com a extensão .desktop
[Desktop Entry]
Version=1.0
Comment[pt_BR]=IDE Netbeans
Name[pt_BR]=Netbeans
Exec=/usr/local/netbeans/bin/netbeans
Comment=Connect to My Server
Encoding=UTF-8
Terminal=true
Type=Application
Categories=Application;Developtment;

sudo chmod +x <file>.desktop
#Mude o dono e o grupo p o usuário que vai executar
sudo chown <user>:<group> <file>.desktop 


#Install gns3
echo "deb http://ppa.launchpad.net/gns3/ppa/ubuntu xenial main" | sudo tee /etc/apt/sources.list.d/gns3.list
echo "deb-src http://ppa.launchpad.net/gns3/ppa/ubuntu xenial main" | sudo tee /etc/apt/sources.list.d/gns3.list
sudo apt-get install dirmngr
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F88F6D313016330404F710FC9A2FD067A2E3EF7B
sudo apt-get update
sudo apt-get install gns3-gui


